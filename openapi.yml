openapi: 3.1.0
info:
  title: TODO Service API
  description: A RESTful API for managing Todos
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.todoservice.com/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
  - name: Todos
    description: Todo management operations

paths:
  # User Management
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users (admin only)
      operationId: getUsers
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new user
      description: Creates a new user in the system
      operationId: createUser
      tags:
        - Users
      requestBody:
        description: User object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update user
      description: Update user information (user can only update their own profile)
      operationId: updateUser
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        description: User object with updated values
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete user
      description: Delete a user account (user can only delete their own account)
      operationId: deleteUser
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Authentication
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return access token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Refresh the access token using a refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Todo Management
  /todos:
    get:
      summary: Get todos for a user
      description: Retrieve all todos for a specific user
      operationId: getTodos
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter todos by status
          required: false
          schema:
            type: string
            enum: [pending, completed, cancelled]
        - name: priority
          in: query
          description: Filter todos by priority
          required: false
          schema:
            type: string
            enum: [low, medium, high]
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [created_asc, created_desc, updated_asc, updated_desc, priority_asc, priority_desc]
            default: created_desc
      responses:
        '200':
          description: Todos retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new todo
      description: Create a new todo for a specific user
      operationId: createTodo
      tags:
        - Todos
      security:
        - bearerAuth: []
      requestBody:
        description: Todo object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoRequest'
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /todos/{todoId}:
    get:
      summary: Get todo by ID
      description: Retrieve a specific todo by its ID
      operationId: getTodoById
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: todoId
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Todo retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update todo
      description: Update a specific todo
      operationId: updateTodo
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: todoId
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            format: uuid
      requestBody:
        description: Todo object with updated values
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTodoRequest'
      responses:
        '200':
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete todo
      description: Delete a specific todo
      operationId: deleteTodo
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: todoId
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Todo deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Bulk operations
  /todos/bulk:
    patch:
      summary: Bulk update todos
      description: Update multiple todos at once
      operationId: bulkUpdateTodos
      tags:
        - Todos
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdateTodosRequest'
      responses:
        '200':
          description: Todos updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                  failed:
                    type: array
                    items:
                      type: object
                      properties:
                        todoId:
                          type: string
                          format: uuid
                        error:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Bulk delete todos
      description: Delete multiple todos at once
      operationId: bulkDeleteTodos
      tags:
        - Todos
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                todoIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1
              required:
                - todoIds
      responses:
        '200':
          description: Todos deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: array
                    items:
                      type: string
                      format: uuid
                  failed:
                    type: array
                    items:
                      type: object
                      properties:
                        todoId:
                          type: string
                          format: uuid
                        error:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # User schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: User's email address
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        avatar:
          type: string
          format: uri
          description: URL to user's avatar image
          nullable: true
        role:
          type: string
          enum: [user, admin]
          description: User's role in the system
        isActive:
          type: boolean
          description: Whether the user account is active
        createdAt:
          type: string
          format: date-time
          description: When the user was created
        updatedAt:
          type: string
          format: date-time
          description: When the user was last updated
      required:
        - id
        - email
        - firstName
        - lastName
        - role
        - isActive
        - createdAt
        - updatedAt

    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          minLength: 8
          description: User's password (minimum 8 characters)
        firstName:
          type: string
          minLength: 1
          description: User's first name
        lastName:
          type: string
          minLength: 1
          description: User's last name
        avatar:
          type: string
          format: uri
          description: URL to user's avatar image
          nullable: true
      required:
        - email
        - password
        - firstName
        - lastName

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        firstName:
          type: string
          minLength: 1
          description: User's first name
        lastName:
          type: string
          minLength: 1
          description: User's last name
        avatar:
          type: string
          format: uri
          description: URL to user's avatar image
          nullable: true

    # Authentication schemas
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token
        expiresIn:
          type: integer
          description: Token expiration time in seconds
        user:
          $ref: '#/components/schemas/User'
      required:
        - accessToken
        - refreshToken
        - expiresIn
        - user

    # Todo schemas
    Todo:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the todo
        userId:
          type: string
          format: uuid
          description: ID of the user who owns this todo
        title:
          type: string
          description: Todo title
        description:
          type: string
          description: Detailed description of the todo
          nullable: true
        status:
          type: string
          enum: [pending, completed, cancelled]
          description: Current status of the todo
        priority:
          type: string
          enum: [low, medium, high]
          description: Priority level of the todo
        dueDate:
          type: string
          format: date-time
          description: When the todo is due
          nullable: true
        completedAt:
          type: string
          format: date-time
          description: When the todo was completed
          nullable: true
        tags:
          type: array
          items:
            type: string
          description: List of tags associated with the todo
        createdAt:
          type: string
          format: date-time
          description: When the todo was created
        updatedAt:
          type: string
          format: date-time
          description: When the todo was last updated
      required:
        - id
        - userId
        - title
        - status
        - priority
        - tags
        - createdAt
        - updatedAt

    CreateTodoRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
          description: Todo title
        description:
          type: string
          maxLength: 1000
          description: Detailed description of the todo
          nullable: true
        priority:
          type: string
          enum: [low, medium, high]
          default: medium
          description: Priority level of the todo
        dueDate:
          type: string
          format: date-time
          description: When the todo is due
          nullable: true
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 50
          maxItems: 10
          description: List of tags associated with the todo
          default: []
      required:
        - title

    UpdateTodoRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
          description: Todo title
        description:
          type: string
          maxLength: 1000
          description: Detailed description of the todo
          nullable: true
        status:
          type: string
          enum: [pending, completed, cancelled]
          description: Current status of the todo
        priority:
          type: string
          enum: [low, medium, high]
          description: Priority level of the todo
        dueDate:
          type: string
          format: date-time
          description: When the todo is due
          nullable: true
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 50
          maxItems: 10
          description: List of tags associated with the todo

    BulkUpdateTodosRequest:
      type: object
      properties:
        todoIds:
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
          description: List of todo IDs to update
        updates:
          type: object
          properties:
            status:
              type: string
              enum: [pending, completed, cancelled]
            priority:
              type: string
              enum: [low, medium, high]
            tags:
              type: array
              items:
                type: string
          description: Fields to update for all specified todos
      required:
        - todoIds
        - updates

    # Common schemas
    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Number of items per page
        total:
          type: integer
          description: Total number of items
        totalPages:
          type: integer
          description: Total number of pages
        hasNext:
          type: boolean
          description: Whether there is a next page
        hasPrevious:
          type: boolean
          description: Whether there is a previous page
      required:
        - page
        - limit
        - total
        - totalPages
        - hasNext
        - hasPrevious

    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
          nullable: true
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
      required:
        - code
        - message
        - timestamp

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            details:
              type: object
              properties:
                fields:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                      message:
                        type: string
                    required:
                      - field
                      - message

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
